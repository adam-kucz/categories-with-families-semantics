{-# OPTIONS --exact-split --prop #-}
module CategoryWithFamilies.Equivalence where

open import CategoryWithFamilies.Definition
open import Category.Fam

open import Category hiding (‚ÑÇ)
open import Functor

open import Universes
open import Proposition.Sum hiding (_,_)
open import Type.Sum hiding (‚å©_,_‚å™)
open import Function
  using (_~_; ==‚Üí~; Bijection; forw; back; bi-inverse)
  renaming (id to id-fun; _‚àò_ to _‚àò‚Çõ_)
open import Logic hiding (‚ä§; _,_)
open import Proof
open import Proposition.Proof hiding (id)

open import Proposition.Identity.Coercion
open import Axiom.FunctionExtensionality
open import Axiom.UniqueChoice

CwF-Explicit-is-CwF :
  Bijection (CwF-Explicit ùí∞ ùí± ùí≤ ùí≥) (CwF ùí∞ ùí± ùí≤ ùí≥)
forw ‚¶É CwF-Explicit-is-CwF ‚¶Ñ cwf-exp = record
  { ‚ÑÇ = C
  ; ‚Ñ± = [F‚ÇÄ= (Œª X ‚Üí Ty X , Tm)
        ,F‚ÇÅ= (Œª f ‚Üí Ty-sub f , Œª x ‚Üí Tm-sub f {x})
        ,id-pres= (Œª X ‚Üí Œ£==
          (subrel $ fun-ext Œª x ‚Üí subrel $ Ty-Id x)
          {!Œª œÉ ‚Üí fun-ext (Tm-Id {X}{œÉ})!})
        ,‚àò-pres= {!!}
        ]
  ; ‚ä§ = ‚ä§
  ; _‚àô_ = _,,_
  ; ùíë = Œª _ ‚Üí ùíë
  ; ùíí = Œª _ ‚Üí ùíó
  ; univ-prop = Œª {_}{_}{A} f t ‚Üí
    ‚å© f , t ‚å™ ‚àÉ., (
    Cons-L A f t _‚àß_.,
    Cons-R A f t _‚àß_.,
    Œª { y (p _‚àß_., q) ‚Üí
      let instance _ = C
          coercion : Tm (Ty-sub y (Ty-sub (ùíë A) A)) == Tm (Ty-sub (ùíë A ‚àò y) A)
          coercion = ap Tm $ sym $ Ty-Comp y (ùíë A) A
      in
      proof y
        === id _ ‚àò y         :by: sym $ left-unit y
        === ‚å© ùíë A , ùíó A ‚å™ ‚àò y :by: ap (_‚àò y) $ sym $ Cons-Id A
        === ‚å© ùíë A ‚àò y , coe coercion (Tm-sub y (ùíó A)) ‚å™
          :by: Cons-Nat (ùíë A) y (ùíó A)
        === ‚å© f , t ‚å™
          :by: subrel $ Id.ap2 ‚å©_,_‚å™ p (
            proof coe coercion (Tm-sub y (ùíó A))
              ‚å™ Het._==_ ‚å™ Tm-sub y (ùíó A)
                :by: coe-eval coercion (Tm-sub y (ùíó A))
              ‚å™ Het._==_ ‚å™ t
                :by: q
            qed)
      qed})
  }
  where open CwF-Explicit cwf-exp
back ‚¶É CwF-Explicit-is-CwF ‚¶Ñ cwf = record
  { C = ‚ÑÇ
  ; Ty = Ty
  ; Tm = Tm
  ; Ty-sub = Ty-sub
  ; Tm-sub = Tm-sub
  ; Ty-Id = ty-id
  ; Ty-Comp = ty-comp
  ; Tm-Id = Œª {Œò}{œÉ} t ‚Üí let instance _ = ‚Ñ±; _ = ‚ÑÇ in
    let coercion = Œª x ‚Üí ap (pr‚ÇÇ (F‚ÇÄ Œò)) (sym $ ty-id x) in
    proof pr‚ÇÇ (F‚ÇÅ (id Œò)) œÉ t
      ‚å™ _==_ ‚å™ coe (coercion œÉ) t
        :by: ap (Œª ‚Äî ‚Üí ‚Äî œÉ t) (subrel {_R_ = Het._==_}{_P_ = _==_} (
          proof pr‚ÇÇ (F‚ÇÅ ‚¶É ‚Ñ± ‚¶Ñ (id Œò))
            ‚å™ Het._==_ ‚å™ (Œª x ‚Üí id-fun)
              :by: ‚àßright (from-Œ£== (id-preserv Œò))
            ‚å™ Het._==_ ‚å™ (Œª x t ‚Üí coe (coercion x) t)
              :by: fun-ext (Œª x ‚Üí fun-ext Œª x‚ÇÅ ‚Üí isym $ coe-eval (coercion x) x‚ÇÅ)
          qed))
      ‚å™ Het._==_ ‚å™ t
        :by: coe-eval (coercion œÉ) t
    qed
  ; Tm-Comp = {!!}
  ; ‚ä§ = ‚ä§
  ; _,,_ = _‚àô_
  ; ùíë = Œª {Œì} ‚Üí ùíë Œì
  ; ùíó = Œª {Œì} ‚Üí ùíí Œì
  ; ‚å©_,_‚å™ = Œª f M ‚Üí elem [ f , M ]
  ; Cons-L = Œª _ f M ‚Üí ‚àßleft $ ‚àßleft $ prop [ f , M ]
  ; Cons-R = Œª _ f M ‚Üí ‚àßright $ ‚àßleft $ prop [ f , M ]
  ; Cons-Nat = {!!}
  ; Cons-Id = Œª {Œî} œÉ ‚Üí
    sym $
    ‚àßright (prop [ ùíë Œî œÉ , ùíí Œî œÉ ]) (id (Œî ‚àô œÉ))
    (right-unit (ùíë _ œÉ) _‚àß_.,
     (proof pr‚ÇÇ (F‚ÇÅ (id (Œî ‚àô œÉ))) _ (ùíí Œî œÉ)
        ‚å™ Het._==_ ‚å™ pr‚ÇÇ (id ‚¶É Fam _ _ ‚¶Ñ (F‚ÇÄ (Œî ‚àô œÉ))) _ (ùíí Œî œÉ)
          :by: ap (Œª ‚Äî ‚Üí pr‚ÇÇ ‚Äî _ (ùíí Œî œÉ)) $ id-preserv (Œî ‚àô œÉ)
        ‚å™ Het._==_ ‚å™ ùíí _ œÉ
          :by: Het.refl _
      qed))
  }
  where open CwF cwf
        instance _ = ‚Ñ±; _ = ‚ÑÇ
        ty-id : {Œò : obj}
          (œÉ : (pr‚ÇÅ ‚àò‚Çõ F‚ÇÄ) Œò)
          ‚Üí -----------------------
          (pr‚ÇÅ ‚àò‚Çõ F‚ÇÅ) (id Œò) œÉ == œÉ
        ty-id {Œò} œÉ =
          have F‚ÇÅ (id Œò) == (id-fun , Œª _ ‚Üí id-fun) :from: id-preserv Œò
          ‚ü∂ pr‚ÇÅ (F‚ÇÅ (id Œò)) == id-fun              :by: ‚àßleft ‚àò‚Çö from-Œ£==
          ‚ü∂ pr‚ÇÅ (F‚ÇÅ (id Œò)) œÉ == œÉ                 :by: ap (Œª ‚Äî ‚Üí ‚Äî œÉ)
        ty-comp : ‚àÄ {Œì Œî Œò : obj}
          (f : Œì ~> Œî)
          (g : Œî ~> Œò)
          (œÉ : (pr‚ÇÅ ‚àò‚Çõ F‚ÇÄ) Œò)
          ‚Üí ------------------------------------------------------------
          (pr‚ÇÅ ‚àò‚Çõ F‚ÇÅ) (g ‚àò f) œÉ == (Ty-sub f ‚àò‚Çõ Ty-sub g) œÉ
        ty-comp {Œì}{Œî}{Œò}f g œÉ = 
          have F‚ÇÅ (g ‚àò f) == compose (Fam _ _){C = F‚ÇÄ Œì}(F‚ÇÅ f)(F‚ÇÅ g)
            :from: ‚àò-preserv f g
          ‚ü∂ pr‚ÇÅ (F‚ÇÅ (g ‚àò f)) == pr‚ÇÅ (F‚ÇÅ f) ‚àò‚Çõ pr‚ÇÅ (F‚ÇÅ g)
            :by: ‚àßleft ‚àò‚Çö from-Œ£==
          ‚ü∂ (pr‚ÇÅ ‚àò‚Çõ F‚ÇÅ) (g ‚àò f) œÉ == (pr‚ÇÅ (F‚ÇÅ f) ‚àò‚Çõ pr‚ÇÅ (F‚ÇÅ g)) œÉ
            :by: ap (Œª ‚Äî ‚Üí ‚Äî œÉ)
        [_,_] : {Œì Œî : obj}{A : Ty Œî}
          (f : Œì ~> Œî)
          (t : pr‚ÇÇ (F‚ÇÄ Œì) (pr‚ÇÅ (F‚ÇÅ f) A)) ‚Üí _
        [ f , M ] = !choice (univ-prop f M)
        
bi-inverse ‚¶É CwF-Explicit-is-CwF ‚¶Ñ = {!!}
